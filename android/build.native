#!/usr/bin/env python3

import os
import sys
import argparse
import subprocess
import re
import logging as log

# FIXME: how to know library name?
PROJECT_NAME = "academ-weather"

ANDROID_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_DIR = os.path.abspath(os.path.join(ANDROID_DIR, '..'))

sys.path.append(PROJECT_DIR)
import bootstrap.utils as utl
from bootstrap.qt import ARCH, qmlimportscanner, qt_elf_dependencies
from bootstrap.utils import run, pushd, sync_dir, sync_file, fs_walk, filenames_filter
from bootstrap.configuration import init_config


context = None


def prepare_qml_imports(args):
    # run qmlimportscanner and copy qmls to ...
    proj_qml_dir = os.path.join(PROJECT_DIR, 'qml')
    imports = qmlimportscanner(args.qt, proj_qml_dir)

    export_dir = context.get('android', 'qml_imports')
    log.debug("qml imports dir: " + export_dir)

    qt_qml_dir = os.path.join(args.qt, 'qml')

    for module in imports:
        path = module.get('path', None)
        if not path or not os.path.exists(path):
            log.debug("path is empty" if not path else ("skip path " + path))
            continue
        # FIXME: ivalid path if type is directory
        target = path.replace(qt_qml_dir, export_dir)
        sync_dir(path, target)


def get_all_qt_deps(args, lib):
    deps = qt_elf_dependencies(args, lib)
    extra_deps = set()

    for l in deps:
        l_deps = qt_elf_dependencies(args, l)
        extra_deps = l_deps - deps
    pass


def prepare_qt_libs(args):
    # first get qt dependencies from qml imports
    qml_export_dir = context.get('android', 'qml_imports')
    libs = filenames_filter(fs_walk(qml_export_dir), ('.so', ))

    dependencies = set()

    for lib in libs:
        deps = qt_elf_dependencies(args, lib)
        dependencies.update(deps)

    # get all qt dependencies from target lib
    libs_dir = context.get('android', 'libs_dir')
    log.debug("libs dir: " + libs_dir)

    target = os.path.join(libs_dir, 'lib' + PROJECT_NAME + '.so')
    if not os.path.exists(target):
        raise Exception('target library is not exist in: ' + target)

    dependencies.update(qt_elf_dependencies(args, target))

    for lib in dependencies:
        source_path = os.path.join(args.qt, 'lib', lib)
        target_path = os.path.join(libs_dir, lib)
        sync_file(source_path, target_path)
    # FIXME: check qt libs recursively


def run_cmake(args):
    libdir = os.path.join(ANDROID_DIR, 'app', 'libs', args.arch)

    cmd = (
        'cmake',
        '-DCMAKE_TOOLCHAIN_FILE=cmake/android.toolchain.cmake',
        '-DANDROID_NDK={}'.format(args.ndk),
        '-DCMAKE_BUILD_TYPE={}'.format(args.build_type),
        '-DANDROID_ABI={}'.format(args.arch),
        '-DCMAKE_PREFIX_PATH={}'.format(args.qt),
        '-GNinja',
        '-DCMAKE_INSTALL_PREFIX={}'.format(libdir),
        os.path.abspath(os.path.join(ANDROID_DIR, '..'))
    )
    run(cmd)


def make(args):
    cmd = (
        'ninja',
        '-j3',
    )
    run(cmd)


def make_install(args):
    cmd = ('ninja', 'install')
    run(cmd)


def check(path, name):
    if not os.path.exists(path):
        raise Exception('{} was not found in "{}"'.format(name, path))


def main(args):
    try:
        global context
        context = init_config(args)

        args.build_dir = os.path.join(args.build_dir, args.arch)
        if not os.path.exists(args.build_dir):
            os.makedirs(args.build_dir)

        if not args.ndk:
            args.ndk = context.get('default', 'ndk', fallback="")

        if not args.qt:
            args.qt = context.get('default', 'qt', fallback="")

        check(args.qt, "Qt")
        check(args.ndk, "Android NDK")

        with pushd(args.build_dir):
            run_cmake(args)
            make(args)
            make_install(args)

        if args.prepare_qml:
            prepare_qml_imports(args)
        if args.prepare_lib:
            prepare_qt_libs(args)

    except Exception as ex:
        print("Error: " + str(ex))
        return 1
    return 0


if __name__ == "__main__":
    log.basicConfig(level=log.DEBUG)
    parser = argparse.ArgumentParser()
    parser.add_argument('-a', '--arch', choices=ARCH, default=ARCH[0],
                        help="target arch. Default {}".format(ARCH[0]))

    parser.add_argument('--ndk', default=os.getenv('ANDROID_NDK', ""),
                        help="path to android ndk. Default is ANDROID_NDK env variable")

    parser.add_argument('--qt', default='', help="path to qt")

    build_types = ('debug', 'release')
    parser.add_argument('-t', '--build-type', choices=build_types, default=build_types[0],
                        help="Build type. Default is {}".format(build_types[0]))

    build_dir = "./app/build/cpp"
    parser.add_argument('-b', '--build-dir', default=build_dir)

    # TODO: add variants for the folowing options
    parser.add_argument('--toolchain-prefix', default='arm-linux-androideabi')
    parser.add_argument('--tool-prefix', default='arm-linux-androideabi')
    parser.add_argument('--toolchain-version', default='4.9')
    parser.add_argument('--ndk-host', default='linux-x86_64')
    parser.add_argument('--prepare-qml', action="store_true")
    parser.add_argument('--prepare-lib', action="store_true")

    args = parser.parse_args()

    exit(main(args))

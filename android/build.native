#!/usr/bin/env python3

import os
import sys
import argparse
import subprocess
import re
import logging as log
from pprint import pprint


ANDROID_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_DIR = os.path.abspath(os.path.join(ANDROID_DIR, '..'))

sys.path.append(PROJECT_DIR)
from bootstrap.qt import qmlimportscanner
from bootstrap.utils import run, pushd, sync_dir


def prepare_qml_imports(args):
    # run qmlimportscanner and copy qmls to ...
    proj_qml_dir = os.path.join(PROJECT_DIR, 'qml')
    imports = qmlimportscanner(args.qt, proj_qml_dir)

    export_dir = os.path.join(ANDROID_DIR, 'assets', 'imports')
    qt_qml_dir = os.path.join(args.qt, 'qml')

    for module in imports:
        path = module.get('path', None)
        if not path or not os.path.exists(path):
            log.debug("path is empty" if not path else ("skip path " + path))
            continue
        # FIXME: ivalid path if type is directory
        target = path.replace(qt_qml_dir, export_dir)
        sync_dir(path, target)


def run_cmake(args):
    libdir = os.path.join(ANDROID_DIR, 'app', 'libs', args.arch)

    cmd = (
        'cmake',
        '-DCMAKE_TOOLCHAIN_FILE=cmake/android.toolchain.cmake',
        '-DANDROID_NDK={}'.format(args.ndk),
        '-DCMAKE_BUILD_TYPE={}'.format(args.build_type),
        '-DANDROID_ABI={}'.format(args.arch),
        '-DCMAKE_PREFIX_PATH={}'.format(args.qt),
        '-GNinja',
        '-DCMAKE_INSTALL_PREFIX={}'.format(libdir),
        os.path.abspath(os.path.join(ANDROID_DIR, '..'))
    )
    run(cmd)


def make(args):
    cmd = (
        'ninja',
        '-j3',
    )
    run(cmd)


def make_install(args):
    cmd = ('ls',)
    run(cmd)

    cmd = ('ninja', 'install')
    run(cmd)


def read_elf_dependensies(args, filepath):
    readelf = os.path.join(
        args.ndk,
        'toolchains',
        '{}-{}'.format(args.toolchain_prefix, args.toolchain_version),
        'prebuilt',
        args.ndk_host,
        'bin',
        '{}-readelf'.format(args.tool_prefix),
    )
    cmd = (readelf, '-d', '-W', filepath)

    output = subprocess.check_output(cmd, universal_newlines=True)

    #  0x00000001 (NEEDED)   Shared library: [libQt5Network.so]
    regexp = re.compile("^.*\(NEEDED\)\s+(Shared library:)\s+\[(?P<library>lib.*\.so)]\s*$")
    libs = set()

    for line in output.split('\n'):
        m = regexp.search(line)
        if m:
            library = m.groupdict().get('library', None)
            if library:
                libs.add(library)
    return libs


def check(path, name):
    if not os.path.exists(path):
        raise Exception('{} was not found in "{}"'.format(name, path))


def main(args):
    try:
        args.build_dir = os.path.join(args.build_dir, args.arch)
        if not os.path.exists(args.build_dir):
            os.makedirs(args.build_dir)

        check(args.qt, "Qt")
        check(args.ndk, "Android NDK")

        with pushd(args.build_dir):
            prepare_qml_imports(args)
            run_cmake(args)
            make(args)
            # make_install(args)
    except Exception as ex:
        print("Exception: " + str(ex))
        return 1
    return 0


if __name__ == "__main__":
    log.basicConfig(level=log.DEBUG)
    parser = argparse.ArgumentParser()
    parser.add_argument('-a', '--arch', default='armeabi-v7a',
                        help="target arch")
    # TODO: get from local.properties
    parser.add_argument('--ndk', default=os.getenv('ANDROID_NDK', ""),
                        help="path to android ndk. Default is ANDROID_NDK env variable")

    parser.add_argument('--qt', default='', help="path to qt")

    build_types = ('debug', 'release')
    parser.add_argument('-t', '--build-type', choices=build_types, default=build_types[0],
                        help="Build type. Default is {}".format(build_types[0]))

    build_dir = "./app/build/cpp"
    parser.add_argument('-b', '--build-dir', default=build_dir)

    # TODO: add variants for the folowing options
    parser.add_argument('--toolchain-prefix', default='arm-linux-androideabi')
    parser.add_argument('--tool-prefix', default='arm-linux-androideabi')
    parser.add_argument('--toolchain-version', default='4.9')
    parser.add_argument('--ndk-host', default='linux-x86_64')

    args = parser.parse_args()

    exit(main(args))
